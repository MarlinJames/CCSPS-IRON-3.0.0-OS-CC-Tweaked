local FilePath
local UserPath
local ShortcutsPath
local DocumentsPath

local Items = {}
local DeskItems = {}
local Notifications = {}
local Buttons = {}
local Videos = 0
local Window_Entities = {}--(windowid).(entityid),text,path,action,w,h,wx,wy
local Popup = {false,1,1,{},nil}
local DesktopDraw = true
local FullScreen = false

local Layers = {false,false,false,false,false}--desktop,shortcuts,windows,taskbar
local systemDi = textutils.unserialize(settings.get("system.dimensions"))
local w, h = systemDi[1],systemDi[2]
 
function GetPaths()
local references = {{"Files"},{"User"},{"Desktop"},{"Documents"}}
local file = fs.open("system/directory.sys","r")
local Content
repeat
    Content = file.readLine()
    if Content ~= nil then
        for i = 1, #references do
            if string.find(string.sub(Content,1,string.find(Content,"=")),references[i][1]) ~= nil then references[i][2] = string.sub(Content,string.find(Content,"=")+1,string.len(Content)) end
        end
    end
until Content == nil
file.close()
FilePath = references[1][2]
UserPath = references[2][2]
ShortcutsPath = references[3][2]
DocumentsPath = references[4][2]
end
 
local function Clear()
term.clear()
term.setCursorPos(1,1)
end
 
function GetItems()
local List = fs.list(ShortcutsPath)
local file
local Name
local Path
local Settings
local Image
for i = 1, #List do
    file = fs.open(fs.combine(ShortcutsPath,List[i]),"r")
    Name = file.readLine()
    Path = file.readLine()
    Settings = file.readLine()--blank,blank,blank,pinnedtotaskbar
    Image = file.readLine()
    local SET = {textutils.unserialize(Settings)}
    if Name ~= nil and SET[4] == true then Items[#Items + 1] = {Name,Path,Image} end
    file.close()
end

GetDesktop()
end
 
function GetDesktop()
local List = fs.list(ShortcutsPath)
local file
local Name
local Path
local Settings
local Image
for i = 1, #List do
    file = fs.open(fs.combine(ShortcutsPath,List[i]),"r")
    Name = file.readLine()
    Path = file.readLine()
    Settings = file.readLine()--blank,blank,blank,pinnedtotaskbar
    Image = file.readLine()
    if Name ~= nil then DeskItems[#DeskItems+ 1] = {Name,Path,Image} end
    file.close()
end
 
end

function OpenPopup(x,y,details)
local Options = {}
if details[2] == "file" then
    Options = {"open","open loc","properties","delete"}
end
Popup = {true,x,y,Options,details[1]}
end
 
function CheckEvent(E,a,b,c,d,e,f)
local i
Pass = false
if E == "windowFullscreen" then
    if b == true then FullScreen = true end
    Pass = true
elseif E == "windowVideoUpdate" then
    --UpdateItem(i,b,"video",c)
    Pass = true
elseif E == "mouse_click" then
    if CheckWindows(b,c) == true then Pass = true end
elseif E == "mouse_down" then
    GetDragWindow(b,c)
elseif E == "modem_message" then
    Notifications[#Notifications + 1] = {"message",b,c,d,e}
    Pass = true
end
return Pass
end
 
function Event()
local Pass = false
while true do
    Pass = false
    os.startTimer(5)
    local event, a, b, c, d, e, f= os.pullEvent()
    Pass = CheckEvent(event,a,b,c,d,e,f)
    if event == "timer" and Pass == false then
        CheckPopup()
    elseif Pass == true then
        Graphics.UpdateScreen()
    end
end
end
 
function CheckWindows(x,y)--need to update Window Interaction Variables
local I = 3
--need to replace check taskbar
Found = TWindows.checkWindow(x,y,"mouse_click")
if Found == false and DesktopDraw == true then
    local RR = bitmap.checkCollision("desktop",x,y)
    if #RR > 0 and RR[1] ~= "background" then TWindows.createWindow(RR[3]) end
end
if Found == true then UpdateScreen() end
return Found
end
 
function drawPopup()
term.setBackgroundColor(colors.white)
term.setCursorPos(Popup[2],Popup[3])
for i = 1, #Popup[4] do
    term.write(Popup[4][i])
    term.setCursorPos(Popup[2],Popup[3] + i)
end
end
 
function CheckPopup(x,y)
local R = false
local Cords = {}
for i = 1, #Popup[4] do
    Cords[i] = {Popup[2],Popup[2] + string.len(Popup[4][i]),Popup[3] - 1 + i, Popup[4][i]}
end
for i = 1, #Cords do
    if x >= Cords[i][1] and x <= Cords[i][2] and y == Cords[i][3] then R = Cords[i][3] end
end
Popup[1] = false
if R == "open" then
 
elseif R == "open loc" then
    shell.run("FInav","start",Popup[5])
elseif R == "properties" then
 
end
return R
end
 
function drawTaskbar()
if FullScreen == false then
Graphics.drawBox(1,h-1,w,1,4,"7")
Graphics.drawBox(1,h,w,1,4,"8")
local x = 3
local Tabs = {}
for i = 1, #Items do
    Graphics.drawBox(x, h -2, 2, 3,4, "0")
    Tabs[i] = 0
    x = x + 5
end
local Found = false
--need to replace section that displays miminized windows on task bar
x = 3
for i = 1, #Tabs do
    term.setCursorPos(x, h)
    if Tabs[i] > 0 then
        term.write(Tabs[i])
    end
    x = x + 5
end
end
 
function drawDesktop()

end

function drawShortcuts()
DesktopDraw = true
if DesktopDraw == true then
Graphics.clearLayer(2)
local y = 2
local x = 2
for i = 1, #DeskItems do
    Graphics.drawBox(x,y,3,3,2,9)
    bitmap.addObject("desktop",DeskItems[i][1],"button",DeskItems[i][2],x,y,3,3)
    if x + 8 < w then x = x + 6 else x = 2 y = y + 5 end
end
end
end
 
function VideoPlayer(Window,Item)
local List = fs.list(Windows[Window][5][Item][3])
local Image = paintutils.loadImage(fs.combine(Windows[Window][5][Item][3],List[Windows[Window][5][Item][4]]))
paintutils.drawImage(Image,Windows[Window][2][1] + Windows[Window][5][Item][5], Windows[Window][2][2] + Windows[Window][5][Item][6])
if Windows[Window][5][Item][4] < #List then
    Windows[Window][5][Item][4] = Windows[Window][5][Item][4] + 1
else
    Videos = Videos - 1
    if Windows[Window][8] ~= nil then shell.run(Windows[Window][8],Windows[Window][5][Item][2]) end
    Windows[Window][5][Item] = nil
end
end

function drawFrame()
if Layers[3] == true then drawWindows() end
if Layers[4] == true then drawTaskbar() end
if Layers[5] == true then if Popup[1] == true then DrawPopup() end end
Graphics.UpdateScreen()
end

function DesktopStart()
Graphics.boot()
Graphics.createLayer(2)
Graphics.createLayer(3)
Graphics.createLayer(4)
Graphics.createLayer(5)
bitmap.boot()
bitmap.createMap("desktop",1,1,w,h)
drawDesktop()
drawShortcuts()

end


Layers = {true,true,true,true,true}
DesktopStart()
GetPaths()
GetItems()
drawShortcuts()
drawFrame()
Event()
