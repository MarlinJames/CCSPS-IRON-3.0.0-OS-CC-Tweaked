local Dir = "os/files/bitmaps"
--bitmap settings: screenx,screeny,mapwidth,mapheight,active
function createMap(Map,x,y,w,h)
Log.record("bitmap","creating map '"..Map.."'")
local Path = fs.combine(Dir,Map..".bit")
local file = fs.open(Path,"w")
file.writeLine(textutils.serialize({x,y,w,h,true},{compact=true}))
for i = 1, h do
    file.writeLine(string.rep("x",w))
end
file.close()
Log.record("bitmap","map created")
end

local function ReadFile(id)
local file = fs.open(fs.combine(Dir,id..".bit"),"r")
local Lines = {}
local Line
repeat
    Line = file.readLine()
    if Line ~= nil then Lines[#Lines+1] = Line end
until Line == nil
file.close()
return Lines
end

function deleteMap(map)
local Path = fs.combine(Dir,map..".bit")
fs.delete(Path)
end

function checkCollision(Map,x,y)
local Lines = ReadFile(Map)
local Res = {}
local settings = textutils.unserialise(Lines[1])
local DI = {settings[1],settings[2],(settings[1]-1)+settings[3],(settings[2]-1)+settings[4]}
if x>= DI[1] and x<= DI[3] and y>= DI[2] and y<= DI[4] then
    local h = settings[4]
    local LX, LY = (x+1)-DI[1], (y+1)-DI[2]
    Log.record("bitmap",Map.." local Position: "..LX..", "..LY)
    for i = h+2, #Lines do
        local Det = textutils.unserialise(Lines[i])
        local X1, Y1 = Det[4], Det[5]
        local X2, Y2 = Det[4]+(Det[6]-1),Det[5]+(Det[7]-1)
        if (LX>= X1 and LX <= X2) and (LY>= Y1 and LY <= Y2) then Res = {Det[1],Det[2],Det[3]} end
    end
    if Res[1] == nil then Res[1] = "background" end
end
Log.record("bitmap",Map.." collision Results: "..textutils.serialize(Res,{compact=true}))
return Res
end

function ToggleMap(Map,visibility)
local Lines = ReadFile(Map)
local Settings = textutils.unserialise(Lines[1])
Lines[1] = textutils.serialise({Settings[1],Settings[2],Settings[3],Settings[4],visibility},{compact=true})
local file = fs.open(fs.combine(Dir,Map..".bit"),"w")
for i = 1, #Lines do
    file.writeLine(Lines[i])
end
file.close()
end

function addObject(Map,id,type,path,x,y,w,h)
x = tonumber(x)
y = tonumber(y)
w = tonumber(w)
h = tonumber(h)
local Lines = ReadFile(Map)
local Symbol
if type == "button" then Symbol = "b" elseif type == "text" then Symbol = "t" elseif type == "image" then Symbol = "i" elseif type == "input" then Symbol = "s" end
for i = 1, h do
    Lines[y+i] = string.sub(Lines[y+i],1,x-1)..string.rep(Symbol,w)..string.sub(Lines[y+i],x+(w),string.len(Lines[y+i]))
end
Lines[#Lines+1] = textutils.serialize({id,type,path,x,y,w,h,true},{compact=true})
local file = fs.open(fs.combine(Dir,Map..".bit"),"w")
for i = 1, #Lines do
    file.writeLine(Lines[i])
end
file.close()
Log.record("bitmap","created Object "..id)
end

function editMap(map,x,y,w,h)
local Lines = ReadFile(map)
local Settings = textutils.unserialise(Lines[1])
local R = {}
R[1] = textutils.serialise({x,y,w,h,true},{compact=true})
if Settings[4] >= h then
    for i = 2, h do
        local T
        if Settings[3] < w then T = Lines[i]..string.rep("x",(string.len(Lines[i])+(w-string.len(Lines[i])))) else T = string.sub(Lines[i],1,w) end
        R[i] = T
    end
else
    
end

end

function deleteObject(Map,id)
local Lines = ReadFile(Map)
local Settings = textutils.unserialize(Lines[1]))
local Y = Settings[4]+2
local Data = {}
local N
for i = Y, #Lines-Y do
    Data = textutils.unserialize(Lines[i])
    if Data[1] == id then N = i end
end
if N ~= nil then table.remove(Lines,N) end
local File = fs.open("os/files/bitmaps/"..Map..".bit","w")
for i = 1, #Lines do
    File.writeLine(Lines[i])
end
File.close()
end

function clearMap(Map)
local file = fs.open(fs.combine(Dir,Map..".bit"),"r")
local Settings = textutils.unserialize(file.readLine())
file.close()
createMap(Map,Settings[1],Settings[2],Settings[3],Settings[4])
end

function boot()
local List = fs.list(Dir)
for i = 1, #List do
    fs.delete(fs.combine(Dir,List[i]))
end
end
