local function getWindowData(id)
local file = fs.open("os/files/windows.txt","r")
local Data = {}
local Line
local Entry
local I = 0
local DT = {}
repeat
    I = I + 1
    Line = file.readLine()
    if Line~= nil then Entry = Line DT = textutils.unserialize(Line) end
until Line == nil or (DT ~= nil and DT[2] == id)
Data = textutils.unserialize(Entry)
file.close()
return Data
end

local function createWin(script,id,name,x,y,w,h)
local file = fs.open("os/files/windows.txt","a")
file.writeLine(textutils.serialize({script,id,name,x,y,w,h,{true,false,true}},{compact=true}))
file.close()
end

local function deleteWin(id)
local file = fs.open("os/files/windows.txt","r")

local Line
local Lines = {}
repeat
    Line = file.readLine()
    if Line ~= nil then local Data = textutils.unserialize(Line) if Data[2] == id then else Lines[#Lines+1] = Line end end
until Line == nil
file.close()
file = fs.open("os/files/windows.txt","w")
for i = 1, #Lines do
    file.writeLine(Lines[i])
end
file.close()
bitmap.deleteMap("window_"..id)
if fs.getSize("os/files/windows.txt") < 10 then fs.delete("os/files/windows.txt") Graphics.clearLayer(3) Graphics.UpdateScreen() else RedrawWindows() end
end

function createWindow(script)
local Table = ProgramReader.execute(script,"call","onCreation")
local Name = Table[1]
local settings = Table[2]
local ID = math.random(1,1000)
local Win = "window_"..ID
createWin(script,ID,Name,1,1,20,20)
bitmap.createMap(Win,1,1,20,20)
bitmap.addObject(Win,"win_close","button","exit",20,1,1,1)
bitmap.addObject(Win,"win_max","button","fullscreen",19,1,1,1)
bitmap.addObject(Win,"win_min","button","shrink",18,1,1,1)
bitmap.addObject(Win,"win_dragbar","button","drag",1,1,17,1)
bitmap.addObject(Win,"win_size","button","resize",20,20,1,1)
local ENTs = ProgramReader.execute(script,"call","onStart")
for i = 1, #ENTs/2 do local T = ENTs[i][7] local TH = ENTs[i][8] if ENTs[i][2] == "text" then T = string.len(ENTs[i][3]) TH = 1 else T = 5 TH = 5 end bitmap.addObject(Win,ENTs[i][1],ENTs[i][2],ENTs[i][3],ENTs[i][5],ENTs[i][6],T,TH) end
RedrawWindows()
end

function RedrawWindows()
Graphics.clearLayer(3)
local file = fs.open("os/files/windows.txt","r")
local data = {}
local Line
local Win
repeat
    Line = file.readLine()
    if Line ~= nil then data = textutils.unserialize(Line) Win = "window_"..data[2] if data[8][3] == true then Graphics.drawBox(data[4],data[5]+1,data[6],data[7]-1,3,"0") Graphics.drawLine(data[4],data[5],data[6]-3,0,3,"7") Graphics.editPixel(data[4]+data[6]-1,data[5],3,"e") Graphics.editText(data[4],data[5],3,data[3],"win_title") Graphics.editPixel(data[4]+data[6]-2,data[5],3,"1") Graphics.editPixel(data[4]+data[6]-3,data[5],3,"4") WindowsText.drawText(Win) end end
until Line == nil

file.close()
Graphics.UpdateScreen()
end

function editWindow(var,arg,id)
local Data = getWindowData(id)--script,id,name,x,y,w,h,{minimizable,fullscreen,visible}
--allows changes of location, dimensions, and visibility
if var == "name" then
    Data[3] = arg
elseif var == "x" then
    Data[4] = arg
elseif var == "y" then
    Data[5] = arg
elseif var == "w" then
    Data[6] = arg
elseif var == "h" then
    Data[7] = arg
elseif var == "fullscreen" then
    Data[8][2] = arg
elseif var == "visible" then
    Data[8][3] = arg
    bitmap.ToggleMap("window_"..id,arg)
end
local file = fs.open("os/files/windows.txt","r")
local Lines = {}
local line
repeat
    line = file.readLine()
    if line ~= nil then local Set = textutils.unserialize(line) local ID = Set[2] if ID ~= id then Lines[#Lines+1] = line else Lines[#Lines+1] = textutils.serialize(Data,{compact=true}) end end
until line == nil
file.close()
file = fs.open("os/files/windows.txt","w")
for i = 1, #Lines do
    file.writeLine(Lines[i])
end
file.close()
RedrawWindows()
end

function checkWindow(x,y,event)
local List = fs.list("os/files/bitmaps")
local Found = false
for i = 1, #List do
    if fs.exists("os/files/windows.txt") and Found == false and string.sub(List[i],1,7) == "window_" then
        local Details = getWindowData(string.sub(List[i],8,string.len(List[i])-4))
        local button = bitmap.checkCollision(string.sub(List[i],1,string.len(List[i])-4),x,y)
        if Details[8][3] == true then
            if button[1] == "win_close" then Found = true deleteWin(Details[2]) end
            if button[1] == "background" then Found = true end
            if button[1] == "win_max" then Found = true editWindow("fullscreen",true,Details[2]) end
            if button[1] == "win_min" then Found = true editWindow("visible",false,Details[2]) end
            if button[1] == "win_size" then Found = true end
            if button[1] == "win_dragbar" then end
            if Found == false and button ~= nil then Found = true ProgramReader.execute(Details[1],"call","onInteract") end
        end
    end
end
return Found
end

function getHidden()
local List = {}
local list = fs.list("os/files/bitmaps")
local win
if fs.exists("os/files/windows.txt") then
    for i = 1, #list do
        win = getWindowData(string.sub(list[i],8,string.len(list[i])-4))
        if win[8][3] == false then List[#List + 1] = {win[3],win[2]} end
    end
end
return List
end


function boot() fs.delete("os/files/windows.txt") end
